"let setTimeout, setInterval, clearInterval, clearTimeout;\n"
"const {\n"
"  /* sprite interactions */ setSolids, setPushables,\n"
"  /*              see also: sprite.x +=, sprite.y += */\n"
"\n"
"  /* art */ setLegend, setBackground,\n"
"  /* text */ addText, clearText,\n"
"\n"
"  /*   spawn sprites */ setMap, addSprite,\n"
"  /* despawn sprites */ clearTile, /* sprite.remove() */\n"
"\n"
"  /* tile queries */ getGrid, getTile, getFirst, getAll, tilesWith,\n"
"  /* see also: sprite.type */\n"
"\n"
"  /* map dimensions */ width, height,\n"
"\n"
"  /* constructors */ bitmap, tune, map,\n"
"\n"
"  /* input handling */ onInput, afterInput,\n"
"\n"
"  /* how much sprite has moved since last onInput: sprite.dx, sprite.dy */\n"
"\n"
"  playTune,\n"
"} = (() => {\n"
"const exports = {};\n"
"/* re-exports from C; bottom of module_native.c has notes about why these are in C */\n"
"exports.setMap = map => native.setMap(map.trim());\n"
"exports.addSprite = native.addSprite;\n"
"exports.getGrid = native.getGrid;\n"
"exports.getTile = native.getTile;\n"
"exports.tilesWith = native.tilesWith;\n"
"exports.clearTile = native.clearTile;\n"
"exports.getFirst = native.getFirst;\n"
"exports.getAll = native.getAll;\n"
"exports.width = native.width;\n"
"exports.height = native.height;\n"
"exports.setBackground = native.setBackground;\n"
"\n"
"\n"
"/* opts: x, y, color (all optional) */\n"
"exports.addText = (str, opts={}) => {\n"
"  // console.log(\"engine.js:addText\");\n"
"  const CHARS_MAX_X = 21;\n"
"  const padLeft = Math.floor((CHARS_MAX_X - str.length)/2);\n"
"\n"
"  native.text_add(\n"
"    str,\n"
"    opts.color ?? [10, 10, 40],\n"
"    opts.x ?? padLeft,\n"
"    opts.y ?? 0\n"
"  );\n"
"}\n"
"\n"
"exports.clearText = () => native.text_clear();\n"
"\n"
"\n"
"exports.setLegend = (...bitmaps) => {\n"
"  // console.log(\"engine.js:setLegend\");\n"
"  native.legend_clear();\n"
"  for (const [charStr, bitmap] of bitmaps) {\n"
"    native.legend_doodle_set(charStr, bitmap.trim());\n"
"  }\n"
"  native.legend_prepare();\n"
"};\n"
"\n"
"exports.setSolids = solids => {\n"
"  // console.log(\"engine.js:setSolids\");\n"
"  native.solids_clear();\n"
"  solids.forEach(native.solids_push);\n"
"};\n"
"\n"
"exports.setPushables = pushTable => {\n"
"  // console.log(\"engine.js:setPushables\");\n"
"  native.push_table_clear();\n"
"  for (const [pusher, pushesList] of Object.entries(pushTable))\n"
"    for (const pushes of pushesList)\n"
"      native.push_table_set(pusher, pushes);\n"
"};\n"
"\n"
"let afterInputs = [];\n"
"// exports.afterInput = fn => (console.log('engine.js:afterInputs'), afterInputs.push(fn));\n"
"exports.afterInput = fn => afterInputs.push(fn);\n"
"\n"
"const button = {\n"
"  pinToHandlers: {\n"
"     \"5\": [],\n"
"     \"7\": [],\n"
"     \"6\": [],\n"
"     \"8\": [],\n"
"    \"12\": [],\n"
"    \"14\": [],\n"
"    \"13\": [],\n"
"    \"15\": [],\n"
"  },\n"
"  keyToPin: {\n"
"    \"w\":  \"5\",\n"
"    \"s\":  \"7\",\n"
"    \"a\":  \"6\",\n"
"    \"d\":  \"8\",\n"
"    \"i\": \"12\",\n"
"    \"k\": \"14\",\n"
"    \"j\": \"13\",\n"
"    \"l\": \"15\",\n"
"  }\n"
"};\n"
"\n"
"native.press_cb(pin => {\n"
"  button.pinToHandlers[pin].forEach(f => f());\n"
"\n"
"  afterInputs.forEach(f => f());\n"
"\n"
"  native.map_clear_deltas();\n"
"});\n"
"\n"
"{\n"
"  let timers = [];\n"
"  let id = 0;\n"
"  setTimeout  = (fn, ms) => (timers.push({ fn, ms, id }), id++);\n"
"  setInterval = (fn, ms) => (timers.push({ fn, ms, id, restartAt: ms }), id++);\n"
"  clearTimeout = clearInterval = id => {\n"
"    timers = timers.filter(t => t.id != id);\n"
"  };\n"
"  native.frame_cb(dt => {\n"
"    timers = timers.filter(tim => {\n"
"      if (tim.ms <= 0) {\n"
"        /* trigger their callback */\n"
"        tim.fn();\n"
"\n"
"        /* in case they cleared themselves */\n"
"        if (!timers.some(t => t == tim))\n"
"          return false;\n"
"\n"
"        /* restart intervals, clear timeouts */\n"
"        if (tim.restartAt !== undefined)\n"
"          tim.ms = tim.restartAt;\n"
"        else\n"
"          return false;\n"
"      }\n"
"      tim.ms -= dt;\n"
"      return true;\n"
"    });\n"
"  });\n"
"}\n"
"\n"
"exports.onInput = (key, fn) => {\n"
"  // console.log(\"engine.js:onInput\");\n"
"  const pin = button.keyToPin[key];\n"
"\n"
"  if (pin === undefined)\n"
"    throw new Error(`the sprig doesn't have a \"${key}\" button!`);\n"
"\n"
"  button.pinToHandlers[pin].push(fn);\n"
"};\n"
"\n"
"exports.playTune = () => {};\n"
"\n"
"function _makeTag(cb) {\n"
"  return (strings, ...interps) => {\n"
"    if (typeof strings === \"string\") {\n"
"      throw new Error(\"Tagged template literal must be used like name`text`, instead of name(`text`)\");\n"
"    }\n"
"    const string = strings.reduce((p, c, i) => p + c + (interps[i] ?? ''), '');\n"
"    return cb(string);\n"
"  }\n"
"}\n"
"exports.bitmap = _makeTag(text => text);\n"
"exports.tune = _makeTag(text => text);\n"
"exports.map = _makeTag(text => text);\n"
"return exports;\n"
"})();\n"
"/*\n"
"@title: Zombie Defense\n"
"@author: Edmund\n"
"\n"
"Controls:\n"
"  W, S - Movement\n"
"  I - Shooting\n"
"  L - Reload\n"
"  J - Restart game\n"
"\n"
"Goal:\n"
"  Get the highest score\n"
"*/\n"
"\n"
"function range(start, stop, step) {\n"
"    if (typeof stop == 'undefined') {\n"
"        // one param defined\n"
"        stop = start;\n"
"        start = 0;\n"
"    }\n"
"\n"
"    if (typeof step == 'undefined') {\n"
"        step = 1;\n"
"    }\n"
"\n"
"    if ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {\n"
"        return [];\n"
"    }\n"
"\n"
"    var result = [];\n"
"    for (var i = start; step > 0 ? i < stop : i > stop; i += step) {\n"
"        result.push(i);\n"
"    }\n"
"\n"
"    return result;\n"
"};\n"
"\n"
"function sleep(ms) {\n"
"    return new Promise(resolve => setTimeout(resolve, ms));\n"
"}\n"
"\n"
"const player = \"p\";\n"
"const zombie = \"z\";\n"
"const barrier = \"b\";\n"
"const grass = \"g\";\n"
"const road = \"r\"\n"
"const background = \"x\";\n"
"const bullet = \"t\";\n"
"const textArea = \"a\";\n"
"const roadStripes = \"s\";\n"
"\n"
"const shootSFX = tune`\n"
"49.504950495049506: d4/49.504950495049506,\n"
"1534.6534653465346`\n"
"const zombieAttackSFX = tune`\n"
"30: d4/30,\n"
"30: d4/30,\n"
"30: d4/30,\n"
"30: d4/30,\n"
"30: d4/30,\n"
"30: d4/30,\n"
"780`\n"
"const loseTune = tune`\n"
"151.5151515151515: g4/151.5151515151515,\n"
"151.5151515151515: f4/151.5151515151515,\n"
"151.5151515151515: e4/151.5151515151515,\n"
"151.5151515151515: d4/151.5151515151515,\n"
"151.5151515151515: c4/151.5151515151515,\n"
"151.5151515151515: c4/151.5151515151515,\n"
"151.5151515151515: c4/151.5151515151515,\n"
"3787.8787878787875`\n"
"const zombieDieSFX = tune`\n"
"47.24409448818898: b4-47.24409448818898,\n"
"47.24409448818898: b4-47.24409448818898,\n"
"47.24409448818898: b4-47.24409448818898,\n"
"1370.0787401574803`\n"
"const zombieMoveSFX = tune`\n"
"326.0869565217391: c4^326.0869565217391,\n"
"10108.695652173912`\n"
"const outOfBulletSFX = tune `\n"
"59.28853754940712: d5/59.28853754940712,\n"
"59.28853754940712: e5/59.28853754940712,\n"
"59.28853754940712: f5/59.28853754940712,\n"
"1719.3675889328065`\n"
"\n"
"setLegend(\n"
"  [ textArea, bitmap`\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111\n"
"1111111111111111`],\n"
"  [ bullet, bitmap`\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"....666666......\n"
"....6666663.....\n"
"....6666663.....\n"
"....666666......\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................`],\n"
"  [ player, bitmap`\n"
"................\n"
"......55........\n"
".....5555.......\n"
".....5565.......\n"
".....2222.......\n"
".....2020.......\n"
".....2222.......\n"
"......22.....0..\n"
".....55555..LLLL\n"
"....55577777L.1.\n"
"...55777555.L1..\n"
"...555557777L...\n"
"...55555555.....\n"
"...55555555.....\n"
"...55555555.....\n"
"....55..55......`],\n"
"  [ zombie, bitmap`\n"
".......4444.....\n"
".....4444444....\n"
"....444444444...\n"
"....433443344...\n"
"...44334433444..\n"
"...44444444444..\n"
"5..44444444444..\n"
"55554L2L2L2L44..\n"
"...44L2L2L2L444.\n"
"...44LLLLLLL444.\n"
"...44LL2L2L4455.\n"
"...44442L244554.\n"
".....44...5554..\n"
".....44.555444..\n"
"...4444..44444..\n"
"...4444..44444..`],\n"
"  [ barrier, bitmap`\n"
"......LLL.......\n"
".....11111......\n"
".....11111......\n"
"......LLL.......\n"
".....11111......\n"
".....11111......\n"
"......LLL.......\n"
".....11111......\n"
".....11111......\n"
"......LLL.......\n"
".....11111......\n"
".....11111......\n"
"......LLL.......\n"
".....11111......\n"
".....11111......\n"
"......LLL.......`],\n"
"  [ grass, bitmap`\n"
"4444444444444444\n"
"4440044444444444\n"
"4400004444004444\n"
"4004404440004444\n"
"4444444440400444\n"
"4444444440440444\n"
"4440044444444444\n"
"4400044444444444\n"
"4404004444444444\n"
"4444444444444444\n"
"4444444444400444\n"
"4444004444004044\n"
"4440004440444044\n"
"4440404444444444\n"
"4444444444444444\n"
"4444444444444444`],\n"
"  [ road, bitmap`\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000`],\n"
"  [ background, bitmap`\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444\n"
"4444444444444444`],\n"
"  [ roadStripes, bitmap`\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"2222222222222222\n"
"2222222222222222\n"
"2222222222222222\n"
"2222222222222222\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000`],\n"
");\n"
"\n"
"setSolids([player, barrier, textArea]);\n"
"setBackground(background)\n"
"\n"
"let level = 0;\n"
"const levels = [\n"
"  map`\n"
"aaaaaaaaaaaaaaaaa\n"
"aaaaaaaaaaaaaaaaa\n"
".bggggggggggggggg\n"
".brrrrrrrrrrrrrrr\n"
".brrrrrrrrrrrrrrr\n"
".brrrrrrrrrrrrrrr\n"
"pbrssrssrssrssrss\n"
".brrrrrrrrrrrrrrr\n"
".brrrrrrrrrrrrrrr\n"
".brrrrrrrrrrrrrrr\n"
".bggggggggggggggg\n"
"aaaaaaaaaaaaaaaaa\n"
"aaaaaaaaaaaaaaaaa`,\n"
"];\n"
"\n"
"setMap(levels[level]);\n"
"\n"
"// Initialization stuff done\n"
"\n"
"// Changeable Values\n"
"const spawnTilesX = 16\n"
"const spawnTilesY = range(3, 10)\n"
"const initBullets = 5;\n"
"const initHealth = 10;\n"
"const initReloadTimeSeconds = 3;\n"
"const initZombieWalkSpeed = 2000;\n"
"const initZombieSpawnRate = 0.1;\n"
"\n"
"// Internal values\n"
"let bullets = initBullets;\n"
"let score = 0;\n"
"let health = initHealth;\n"
"let gameOver = false;\n"
"let reloadTimeSeconds = initReloadTimeSeconds;\n"
"let isReloading = false;\n"
"let reloadRemainTime = 0;\n"
"let zombieWalkSpeed = initZombieWalkSpeed;\n"
"let zombieSpawnRate = initZombieSpawnRate;\n"
"\n"
"onInput(\"w\", () => {\n"
"  if (gameOver) return;\n"
"  getFirst(player).y -= 1;\n"
"});\n"
"\n"
"onInput(\"s\", () => {\n"
"  if (gameOver) return;\n"
"  getFirst(player).y += 1;\n"
"});\n"
"\n"
"onInput(\"i\", () => {\n"
"  if (gameOver) return;\n"
"  if (bullets <= 0) {\n"
"    playTune(outOfBulletSFX);\n"
"    return;\n"
"  }\n"
"  playTune(shootSFX);\n"
"  const playerObj = getFirst(player);\n"
"  bullets--\n"
"  addSprite(playerObj.x + 1, playerObj.y, bullet);\n"
"  if (bullets <= 0) {\n"
"    playTune(outOfBulletSFX);\n"
"  }\n"
"});\n"
"\n"
"onInput(\"j\", () => {\n"
"  restartGame();\n"
"});\n"
"\n"
"onInput(\"l\", () => {\n"
"  // Checking for bullet state\n"
"  if (bullets != 5) {\n"
"    reload()\n"
"  }\n"
"});\n"
"\n"
"const reload = async () => {\n"
"  if (isReloading) return;\n"
"  addText(`Reloading...`, {\n"
"    x: 1, \n"
"    y: 14, \n"
"    color: [ 0, 200, 200 ]\n"
"  })\n"
"  isReloading = true\n"
"  for (let i = reloadTimeSeconds; i > 0; i--) {\n"
"        reloadRemainTime = i\n"
"        await sleep(1000);\n"
"    }\n"
"  bullets = 5\n"
"  isReloading = false\n"
"  await sleep(3000);\n"
"}\n"
"\n"
"const restartGame = async () => {\n"
"  // Reinit game internal values\n"
"  bullets = initBullets;\n"
"  score = 0;\n"
"  health = initHealth;\n"
"  gameOver = false;\n"
"  reloadTimeSeconds = initReloadTimeSeconds;\n"
"  isReloading = false;\n"
"  reloadRemainTime = 0;\n"
"  zombieWalkSpeed = initZombieWalkSpeed;\n"
"  zombieSpawnRate = initZombieSpawnRate;\n"
"\n"
"  // Remove all zombies\n"
"  getAll(zombie).forEach((zombie) => {\n"
"    zombie.remove();\n"
"  });\n"
"}\n"
"\n"
"setInterval(() => {\n"
"  if (gameOver) return;\n"
"  clearText()\n"
"  if (!isReloading) {\n"
"    if (bullets > 0) {\n"
"      addText(`Bullets:${bullets}`, {\n"
"        x: 1, \n"
"        y: 14, \n"
"        color: [ 0, 200, 150 ]\n"
"      })\n"
"    } else {\n"
"      addText(`Reload!`, {\n"
"        x: 1, \n"
"        y: 14, \n"
"        color: [ 200, 0, 0 ]\n"
"      })\n"
"    }\n"
"  } else {\n"
"    addText(`Reloading...${reloadRemainTime}`, {\n"
"      x: 1, \n"
"      y: 14, \n"
"      color: [ 0, 200, 200 ]\n"
"    })\n"
"  }\n"
"  addText(`Score:${score}`, {\n"
"    x: 1, \n"
"    y: 1, \n"
"    color: [ 0, 0, 200 ]\n"
"  })\n"
"  addText(`Health:${health}`, {\n"
"    x: 10, \n"
"    y: 1, \n"
"    color: [ 200, 0, 0 ]\n"
"  })\n"
"}, 10)\n"
" \n"
"setInterval(() => {\n"
"  getAll(bullet).forEach((bulletObj) => {\n"
"    getTile(bulletObj.x + 1, bulletObj.y).forEach((sprite) => {\n"
"      if (sprite.type === zombie) {\n"
"        // Zombie detected\n"
"        playTune(zombieDieSFX);\n"
"        sprite.remove()\n"
"        bulletObj.remove()\n"
"        score += 1\n"
"        return;\n"
"      }\n"
"    })\n"
"    if (bulletObj.x === 16) {\n"
"      bulletObj.remove();\n"
"    }\n"
"    bulletObj.x += 1\n"
"  }) \n"
"}, 30)\n"
"\n"
"setInterval(() => {\n"
"  if (health > 0) return;\n"
"  if (gameOver) return;\n"
"  gameOver = true;\n"
"  clearText()\n"
"  addText(`Game over`, {\n"
"    x: 6, \n"
"    y: 6, \n"
"    color: [ 200, 0, 0 ]\n"
"  })\n"
"  addText(`Score:${score}`, {\n"
"    x: 7, \n"
"    y: 7, \n"
"    color: [ 200, 0, 0 ]\n"
"  })\n"
"  addText(`Press j to retry`, {\n"
"    x: 3, \n"
"    y: 8, \n"
"    color: [ 200, 0, 0 ]\n"
"  })\n"
"  // Remove all zombies\n"
"  getAll(zombie).forEach((zombie) => {\n"
"    zombie.remove();\n"
"  });\n"
"  playTune(loseTune);\n"
"}, 30)\n"
"\n"
"setInterval(() => {\n"
"  if (gameOver) return;\n"
"  for (let y = spawnTilesY[0]; y < spawnTilesY.slice(-1)[0]; y++) {\n"
"    if (Math.random() < zombieSpawnRate) {\n"
"      addSprite(spawnTilesX, y, zombie);\n"
"    }\n"
"  }\n"
"}, zombieWalkSpeed)\n"
"\n"
"setInterval(() => {\n"
"  if (gameOver) return;\n"
"  if (getFirst(zombie)) {\n"
"    playTune(zombieMoveSFX);\n"
"  };\n"
"  getAll(zombie).forEach((zombieObj) => {\n"
"    if (zombieObj.x === 2) {\n"
"      // Touched gate\n"
"      playTune(zombieAttackSFX);\n"
"      health--\n"
"      zombieObj.remove();\n"
"    }\n"
"    zombieObj.x -= 1\n"
"  }) \n"
"}, zombieWalkSpeed)\n"
"\n"
"// Game gets harder every 5 seconds\n"
"setInterval(() => {\n"
"  if (zombieWalkSpeed > 1000) {\n"
"    \n"
"  }\n"
"  zombieWalkSpeed -= 250\n"
"  if (zombieSpawnRate < 0.4) {\n"
"    zombieSpawnRate += 0.05\n"
"  }\n"
"}, 5 * 1000)\n"
